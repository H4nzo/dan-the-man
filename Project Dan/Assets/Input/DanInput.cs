//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/DanInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DanInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DanInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DanInput"",
    ""maps"": [
        {
            ""name"": ""Dan"",
            ""id"": ""261b515c-860a-4afe-a782-4e0c3eed4af0"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8befa0ed-37cb-4e40-b888-724fb0c0a947"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movt"",
                    ""type"": ""Value"",
                    ""id"": ""44d9ec6c-258a-4255-a350-11b169a5d215"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Punch"",
                    ""type"": ""Button"",
                    ""id"": ""f2aef2d2-a44d-4efc-a6fe-a8754a9f6489"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""830d68ab-990c-4f1e-89d7-f22ccf1527f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""NextWeapon"",
                    ""type"": ""Button"",
                    ""id"": ""8bf230ae-7242-4161-8448-7232879f2975"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dfe17165-61ac-4b86-a4b1-62bdc0c030e5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c0bc870b-446a-49b8-bf66-ac2684c98a08"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""467b5838-f4f7-48c0-bb7a-248c840351f8"",
                    ""path"": ""<Gamepad>/dpad/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""35375276-16a1-4370-a5e6-5473bd2c87f0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movt"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""2719a8bb-5bc4-48c3-92ae-7356de9caeeb"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""fd8d9851-f828-4bb8-9281-94190ce93dbc"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""931bcbec-4ecc-4621-a1df-14323863902b"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2effc448-bf11-4af3-963d-46e7b41ca78f"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9915e787-46f9-4ff4-83ed-1816525e811c"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""be5a7aca-adae-4d19-910d-d759732f2966"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea087851-c213-4b03-ad6d-385d273ecb03"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""NextWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Dan
        m_Dan = asset.FindActionMap("Dan", throwIfNotFound: true);
        m_Dan_Jump = m_Dan.FindAction("Jump", throwIfNotFound: true);
        m_Dan_Movt = m_Dan.FindAction("Movt", throwIfNotFound: true);
        m_Dan_Punch = m_Dan.FindAction("Punch", throwIfNotFound: true);
        m_Dan_Fire = m_Dan.FindAction("Fire", throwIfNotFound: true);
        m_Dan_NextWeapon = m_Dan.FindAction("NextWeapon", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Dan
    private readonly InputActionMap m_Dan;
    private List<IDanActions> m_DanActionsCallbackInterfaces = new List<IDanActions>();
    private readonly InputAction m_Dan_Jump;
    private readonly InputAction m_Dan_Movt;
    private readonly InputAction m_Dan_Punch;
    private readonly InputAction m_Dan_Fire;
    private readonly InputAction m_Dan_NextWeapon;
    public struct DanActions
    {
        private @DanInput m_Wrapper;
        public DanActions(@DanInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Jump => m_Wrapper.m_Dan_Jump;
        public InputAction @Movt => m_Wrapper.m_Dan_Movt;
        public InputAction @Punch => m_Wrapper.m_Dan_Punch;
        public InputAction @Fire => m_Wrapper.m_Dan_Fire;
        public InputAction @NextWeapon => m_Wrapper.m_Dan_NextWeapon;
        public InputActionMap Get() { return m_Wrapper.m_Dan; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DanActions set) { return set.Get(); }
        public void AddCallbacks(IDanActions instance)
        {
            if (instance == null || m_Wrapper.m_DanActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DanActionsCallbackInterfaces.Add(instance);
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Movt.started += instance.OnMovt;
            @Movt.performed += instance.OnMovt;
            @Movt.canceled += instance.OnMovt;
            @Punch.started += instance.OnPunch;
            @Punch.performed += instance.OnPunch;
            @Punch.canceled += instance.OnPunch;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @NextWeapon.started += instance.OnNextWeapon;
            @NextWeapon.performed += instance.OnNextWeapon;
            @NextWeapon.canceled += instance.OnNextWeapon;
        }

        private void UnregisterCallbacks(IDanActions instance)
        {
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Movt.started -= instance.OnMovt;
            @Movt.performed -= instance.OnMovt;
            @Movt.canceled -= instance.OnMovt;
            @Punch.started -= instance.OnPunch;
            @Punch.performed -= instance.OnPunch;
            @Punch.canceled -= instance.OnPunch;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @NextWeapon.started -= instance.OnNextWeapon;
            @NextWeapon.performed -= instance.OnNextWeapon;
            @NextWeapon.canceled -= instance.OnNextWeapon;
        }

        public void RemoveCallbacks(IDanActions instance)
        {
            if (m_Wrapper.m_DanActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDanActions instance)
        {
            foreach (var item in m_Wrapper.m_DanActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DanActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DanActions @Dan => new DanActions(this);
    public interface IDanActions
    {
        void OnJump(InputAction.CallbackContext context);
        void OnMovt(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnNextWeapon(InputAction.CallbackContext context);
    }
}
